{"version":3,"sources":["pages/Home.js","pages/StateHookExample.js","components/Navbar.js","pages/EffectHookExample.js","pages/ReducerExample.js","context.js","components/InputForm.js","components/Output.js","pages/ContextHookExample.js","App.js","serviceWorker.js","index.js"],"names":["Home","StateHookExample","useState","count","setCount","onClick","href","Navbar","to","EffectHookExample","useEffect","document","title","initialState","reducer","state","action","type","Error","Counter","useReducer","dispatch","ReducerHookExample","MyContext","React","createContext","InputForm","useContext","fieldValue","setFieldValue","size","value","onChange","event","target","Output","ContextHookExample","Provider","path","exact","component","App","appLocation","window","location","pathname","toString","console","log","Boolean","hostname","match","ReactDOM","render","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"gQAEaA,EAAO,WAClB,OACE,6BACE,2C,OCHOC,EAAmB,WAAM,MAEVC,mBAAS,GAFC,mBAE7BC,EAF6B,KAEtBC,EAFsB,KAIpC,OACE,6BACE,gFAAcD,EAAd,uBACA,4BAAQE,QAAS,kBAAMD,EAASD,EAAQ,KAAxC,wEACA,mDAEE,uBAAGG,KAAK,6CAAR,YCTKC,EAAS,kBACpB,6BACE,4BACE,4BACE,kBAAC,IAAD,CAAMC,GAAG,KAAT,SAEF,4BACE,kBAAC,IAAD,CAAMA,GAAG,uBAAT,uBAEF,4BACE,kBAAC,IAAD,CAAMA,GAAG,wBAAT,wBAEF,4BACE,kBAAC,IAAD,CAAMA,GAAG,yBAAT,yBAEF,4BACE,kBAAC,IAAD,CAAMA,GAAG,yBAAT,4BCjBKC,EAAoB,WAAM,MAEXP,mBAAS,GAFE,mBAE9BC,EAF8B,KAEvBC,EAFuB,KASrC,OALAM,qBAAU,WAERC,SAASC,MAAT,4DAA8BT,EAA9B,0BAIA,6BACE,4QACA,gFAAcA,EAAd,uBACA,4BAAQE,QAAS,kBAAMD,EAASD,EAAQ,KAAxC,wEACA,mDAEE,uBAAGG,KAAK,8CAAR,YChBFO,EAAe,CAAEV,MAAO,GAE9B,SAASW,EAAQC,EAAOC,GACtB,OAAQA,EAAOC,MACb,IAAK,YACH,MAAO,CAAEd,MAAOY,EAAMZ,MAAQ,GAChC,IAAK,YACH,MAAO,CAAEA,MAAOY,EAAMZ,MAAQ,GAChC,QACE,MAAM,IAAIe,OAIhB,SAASC,IAAW,IAAD,EACSC,qBAAWN,EAASD,GAD7B,mBACVE,EADU,KACHM,EADG,KAEjB,OACE,8CACUN,EAAMZ,MACd,4BAAQE,QAAS,kBAAMgB,EAAS,CAAEJ,KAAM,gBAAxC,KACA,4BAAQZ,QAAS,kBAAMgB,EAAS,CAAEJ,KAAM,gBAAxC,MAKC,IAAMK,EAAqB,WAChC,OACE,6BACE,kBAACH,EAAD,QC3BOI,EAAYC,IAAMC,gBCElBC,EAAY,WAAO,IAAD,EACSC,qBAAWJ,GAAzCK,EADqB,EACrBA,WAAYC,EADS,EACTA,cAEpB,OACE,8BACE,6BACE,0CACA,6BACE,wCACA,2BACEZ,KAAK,OACLa,KAAK,KACLC,MAAOH,EACPI,SAAU,SAACC,GAAD,OAAWJ,EAAcI,EAAMC,OAAOH,cCb/CI,EAAS,WAAO,IACnBP,EAAeD,qBAAWJ,GAA1BK,WAER,OACE,6BACE,2CACA,6BACE,0CACA,gCAASA,MCNJQ,EAAqB,WAAO,IAAD,EACFlC,qBADE,mBAC/B0B,EAD+B,KACnBC,EADmB,KAGtC,OACE,kBAACN,EAAUc,SAAX,CAAoBN,MAAO,CAAEH,aAAYC,kBACvC,6BACE,kDACA,6BACE,4BACE,kBAAC,IAAD,CAASrB,GAAG,+BAAZ,UAEF,4BACE,kBAAC,IAAD,CAASA,GAAG,gCAAZ,YAGJ,kBAAC,IAAD,KACE,kBAAC,IAAD,CACE8B,KAAK,8BACLC,OAAK,EACLC,UAAWd,IAEb,kBAAC,IAAD,CAAOY,KAAK,+BAA+BC,OAAK,EAACC,UAAWL,IAC5D,kBAAC,IAAD,CAAU3B,GAAG,oCCQRiC,MA1Bf,WACE,IAAMC,EAAcC,OAAOC,SAASC,SAASC,WAE7C,OADAC,QAAQC,IAAIN,GAEV,kBAAC,IAAD,KACE,sDACA,kBAAC,EAAD,MACA,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAOJ,KAAK,IAAIC,OAAK,EAACC,UAAWxC,IACjC,kBAAC,IAAD,CAAOsC,KAAK,sBAAsBC,OAAK,EAACC,UAAWvC,IACnD,kBAAC,IAAD,CACEqC,KAAK,uBACLC,OAAK,EACLC,UAAW/B,IAEb,kBAAC,IAAD,CACE6B,KAAK,wBACLC,OAAK,EACLC,UAAWlB,IAEb,kBAAC,IAAD,CAAOgB,KAAK,wBAAwBE,UAAWJ,OClBnCa,QACW,cAA7BN,OAAOC,SAASM,UAEe,UAA7BP,OAAOC,SAASM,UAEhBP,OAAOC,SAASM,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAAS1C,SAAS2C,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLf,QAAQe,MAAMA,EAAMC,c","file":"static/js/main.76f2fbe8.chunk.js","sourcesContent":["import React from \"react\";\n\nexport const Home = () => {\n  return (\n    <div>\n      <h1>Home page</h1>\n    </div>\n  );\n};\n","import React, { useState } from \"react\";\n\nexport const StateHookExample = () => {\n  // Объявляем новую переменную состояния \"count\"\n  const [count, setCount] = useState(0);\n\n  return (\n    <div>\n      <p>Вы нажали {count} раз</p>\n      <button onClick={() => setCount(count + 1)}>Нажми на меня</button>\n      <h4>\n        For more information\n        <a href=\"https://reactjs.org/docs/hooks-state.html\"> see.</a>\n      </h4>\n    </div>\n  );\n};\n","import React from \"react\";\nimport { Link } from \"react-router-dom\";\n\nexport const Navbar = () => (\n  <nav>\n    <ul>\n      <li>\n        <Link to=\"/\">Home</Link>\n      </li>\n      <li>\n        <Link to=\"/state-hook-example\">State Hook Example</Link>\n      </li>\n      <li>\n        <Link to=\"/effect-hook-example\">Effect Hook Example</Link>\n      </li>\n      <li>\n        <Link to=\"/reducer-hook-example\">Reducer Hook Example</Link>\n      </li>\n      <li>\n        <Link to=\"/context-hook-example\">Context Hook Example</Link>\n      </li>\n    </ul>\n  </nav>\n);\n","import React, { useState, useEffect } from \"react\";\n\nexport const EffectHookExample = () => {\n  // Объявляем новую переменную состояния \"count\"\n  const [count, setCount] = useState(0);\n\n  useEffect(() => {\n    // Обновляем заголовок документа с помощью API браузера\n    document.title = `Вы нажали ${count} раз`;\n  });\n\n  return (\n    <div>\n      <h3>Заголовок документа обновляется с помощью useEffect</h3>\n      <p>Вы нажали {count} раз</p>\n      <button onClick={() => setCount(count + 1)}>Нажми на меня</button>\n      <h4>\n        For more information\n        <a href=\"https://reactjs.org/docs/hooks-effect.html\"> see.</a>\n      </h4>\n    </div>\n  );\n};\n","import React, { useReducer } from \"react\";\n\nconst initialState = { count: 0 };\n\nfunction reducer(state, action) {\n  switch (action.type) {\n    case \"increment\":\n      return { count: state.count + 1 };\n    case \"decrement\":\n      return { count: state.count - 1 };\n    default:\n      throw new Error();\n  }\n}\n\nfunction Counter() {\n  const [state, dispatch] = useReducer(reducer, initialState);\n  return (\n    <>\n      Count: {state.count}\n      <button onClick={() => dispatch({ type: \"decrement\" })}>-</button>\n      <button onClick={() => dispatch({ type: \"increment\" })}>+</button>\n    </>\n  );\n}\n\nexport const ReducerHookExample = () => {\n  return (\n    <div>\n      <Counter />\n    </div>\n  );\n};\n","import React from \"react\";\n\nexport const MyContext = React.createContext();\n","import React, { useContext, useState } from \"react\";\n\nimport { MyContext } from \"../context\";\n\nexport const InputForm = () => {\n  const { fieldValue, setFieldValue } = useContext(MyContext);\n\n  return (\n    <form>\n      <div>\n        <h3>Input form</h3>\n        <div>\n          <label>Input</label>\n          <input\n            type=\"text\"\n            size=\"30\"\n            value={fieldValue}\n            onChange={(event) => setFieldValue(event.target.value)}\n          ></input>\n        </div>\n      </div>\n    </form>\n  );\n};\n","import React, { useContext } from \"react\";\n\nimport { MyContext } from \"../context\";\n\nexport const Output = () => {\n  const { fieldValue } = useContext(MyContext);\n\n  return (\n    <div>\n      <h3>Output form</h3>\n      <div>\n        <label>Output:</label>\n        <output>{fieldValue}</output>\n      </div>\n    </div>\n  );\n};\n","import React, { useState } from \"react\";\nimport { MyContext } from \"../context\";\nimport { InputForm } from \"../components/InputForm\";\nimport { Output } from \"../components/Output\";\nimport { Route, Switch, NavLink, Redirect } from \"react-router-dom\";\n\nexport const ContextHookExample = () => {\n  const [fieldValue, setFieldValue] = useState();\n\n  return (\n    <MyContext.Provider value={{ fieldValue, setFieldValue }}>\n      <div>\n        <h3>ContextHookExample</h3>\n        <nav>\n          <ul>\n            <NavLink to=\"/context-hook-example/input\">Input</NavLink>\n          </ul>\n          <ul>\n            <NavLink to=\"/context-hook-example/output\">Output</NavLink>\n          </ul>\n        </nav>\n        <Switch>\n          <Route\n            path=\"/context-hook-example/input\"\n            exact\n            component={InputForm}\n          />\n          <Route path=\"/context-hook-example/output\" exact component={Output} />\n          <Redirect to=\"/context-hook-example/input\"></Redirect>\n        </Switch>\n      </div>\n    </MyContext.Provider>\n  );\n};\n","import React from \"react\";\nimport { Switch, Route, HashRouter } from \"react-router-dom\";\n\nimport { Home } from \"./pages/Home\";\nimport { StateHookExample } from \"./pages/StateHookExample\";\nimport { Navbar } from \"./components/Navbar\";\nimport { EffectHookExample } from \"./pages/EffectHookExample\";\nimport { ReducerHookExample } from \"./pages/ReducerExample\";\nimport { ContextHookExample } from \"./pages/ContextHookExample\";\n\nfunction App() {\n  const appLocation = window.location.pathname.toString();\n  console.log(appLocation);\n  return (\n    <HashRouter>\n      <h1>Simple React App in JS</h1>\n      <Navbar />\n      <Switch>\n        <Route path=\"/\" exact component={Home} />\n        <Route path=\"/state-hook-example\" exact component={StateHookExample} />\n        <Route\n          path=\"/effect-hook-example\"\n          exact\n          component={EffectHookExample}\n        />\n        <Route\n          path=\"/reducer-hook-example\"\n          exact\n          component={ReducerHookExample}\n        />\n        <Route path=\"/context-hook-example\" component={ContextHookExample} />\n      </Switch>\n    </HashRouter>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}